intreg -> (-1, -1)
nr - 0 -> (14, 0)
, -> (-1, -1)
sumaPare - 0 -> (5, 0)
, -> (-1, -1)
cifra - 0 -> (7, 0)
; -> (-1, -1)
citeste -> (-1, -1)
nr - 0 -> (14, 0)
; -> (-1, -1)
sumaPare - 0 -> (5, 0)
= -> (-1, -1)
0 - 1 -> (3, 0)
; -> (-1, -1)
cat_timp -> (-1, -1)
( -> (-1, -1)
nr - 0 -> (14, 0)
> -> (-1, -1)
0 - 1 -> (3, 0)
) -> (-1, -1)
{ -> (-1, -1)
cifra - 0 -> (7, 0)
= -> (-1, -1)
nr - 0 -> (14, 0)
% -> (-1, -1)
10 - 1 -> (7, 1)
; -> (-1, -1)
daca -> (-1, -1)
( -> (-1, -1)
cifra - 0 -> (7, 0)
% -> (-1, -1)
2 - 1 -> (5, 1)
== -> (-1, -1)
0 - 1 -> (3, 0)
) -> (-1, -1)
{ -> (-1, -1)
sumaPare - 0 -> (5, 0)
= -> (-1, -1)
sumaPare - 0 -> (5, 0)
+ -> (-1, -1)
cifra - 0 -> (7, 0)
; -> (-1, -1)
} -> (-1, -1)
altfel -> (-1, -1)
{ -> (-1, -1)
nr - 0 -> (14, 0)
= -> (-1, -1)
nr - 0 -> (14, 0)
/ -> (-1, -1)
10 - 1 -> (7, 1)
; -> (-1, -1)
} -> (-1, -1)
afiseaza -> (-1, -1)
"suma = " - 1 -> (1, 0)
+ -> (-1, -1)
sumaPare - 0 -> (5, 0)
; -> (-1, -1)
